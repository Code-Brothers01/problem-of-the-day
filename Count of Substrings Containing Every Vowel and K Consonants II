class Solution {
public:
    long long countOfSubstrings(string word, int k) {
        return atleast(word,k) - atleast(word,k+1);
    }
    long long atleast(string word,int k){
        long numValidSubstring = 0;
        unordered_map<char,int>vowelCount;
        int consonantCount = 0;
        int start = 0;
        int end = 0;
        while(end < word.size()){
            char newChar = word[end];
            if(isVowel(newChar)){
                vowelCount[newChar]++;
            }else{
                consonantCount++;
            }
            while(vowelCount.size() == 5 && consonantCount >= k){
                numValidSubstring += word.size() - end;
                char startChar = word[start];
                if(isVowel(startChar)){
                    vowelCount[startChar]--;
                    if(vowelCount[startChar] == 0){
                        vowelCount.erase(startChar);
                    }
                }else{
                    consonantCount--;
                }
                start++;
            }
            end++;
        }
        return numValidSubstring;
    }
    bool isVowel(char c){
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
};
