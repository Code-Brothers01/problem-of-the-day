class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {
        // int n = grid.size();
        // int missing = -1, repeat = -1;
        // unordered_map<int,int> freq;
        // for(auto& row : grid){
        //     for(int num : row){
        //         freq[num]++;
        //     }
        // }
        // for(int num = 1;num <= n*n;num++){
        //     if(!freq.count(num)){
        //         missing = num;
        //     }else if(freq[num] == 2){
        //         repeat = num;
        //     }
        // }
        // return {repeat,missing};
        long long sum = 0, sqrSum = 0;
        long long n = grid.size();
        long long total = n*n;
        for(int row = 0;row < n;row++){
            for(int col = 0;col < n;col++){
                sum += grid[row][col];
                sqrSum += static_cast<long long>(grid[row][col]*grid[row][col]);
            }
        }
        long long sumDiff = sum - total*(total + 1) / 2;
        long long sqrDiff = sqrSum - total*(total + 1)*(2*total + 1) / 6;
        int repeat = (sqrDiff / sumDiff + sumDiff) / 2;
        int missing = (sqrDiff / sumDiff - sumDiff) / 2;
        return {repeat,missing}; 
    }
};
