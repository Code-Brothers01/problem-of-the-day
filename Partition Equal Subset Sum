class Solution {
public:
    bool f(int ind, int target, vector<int> &arr,vector<vector<int>> &dp){
        if(target == 0) return true;
        if(ind == 0) return (arr[0] == target);
        if(dp[ind][target] != -1) return dp[ind][target];
        bool notTake = f(ind-1,target,arr,dp);
        bool take = false;
        if(arr[ind] <= target) take = f(ind-1,target-arr[ind],arr,dp);
        return dp[ind][target] = take | notTake;
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;int n = nums.size();
        for(int i = 0; i < n; i++){
            sum = sum +  nums[i];
        }
        if (sum % 2 != 0) return false;

        // vector<vector<int>> dp(n+1,vector<int>(sum/2+1,-1));
        // return f(n-1,sum/2,nums,dp);

        int k = sum/2;

        vector<vector<bool>> dp(n, vector<bool>(k+1,0));
        for(int i = 0;i < n;i++) dp[i][0] = true;
        if (nums[0] <= k) {
            dp[0][nums[0]] = true;
        }
        for(int ind = 1;ind < n;ind++){
            for(int target = 1;target <= k;target++){
                bool notTake = dp[ind - 1][target];
                bool take = false;
                if(nums[ind] <= target) take = dp[ind - 1][target-nums[ind]];
                dp[ind][target] = take | notTake;
            }
        }
        return dp[n-1][k];
    }
};
